import torch
import time
import numpy as np

def benchmark_device(device_name):
    """–ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    device = torch.device(device_name)
    print(f"\nüî• –¢–µ—Å—Ç–∏—Ä—É–µ–º {device_name.upper()}...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 32
    seq_len = 60
    d_model = 128
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–Ω–∑–æ—Ä—ã
    x = torch.randn(batch_size, seq_len, d_model).to(device)
    linear = torch.nn.Linear(d_model, d_model).to(device)
    
    # –ü—Ä–æ–≥—Ä–µ–≤
    for _ in range(10):
        _ = linear(x)
    
    # –ë–µ–Ω—á–º–∞—Ä–∫
    start_time = time.time()
    iterations = 1000
    
    for _ in range(iterations):
        output = linear(x)
        loss = output.sum()
        loss.backward()
    
    end_time = time.time()
    total_time = end_time - start_time
    
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π: {total_time:.3f} —Å–µ–∫")
    print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {iterations/total_time:.1f} –∏—Ç–µ—Ä–∞—Ü–∏–π/—Å–µ–∫")
    
    return total_time

def main():
    print("üß™ –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PyTorch –Ω–∞ M1 Mac")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    print("üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    print(f"   CPU: ‚úÖ")
    print(f"   MPS: {'‚úÖ' if torch.backends.mps.is_available() else '‚ùå'}")
    print(f"   CUDA: {'‚úÖ' if torch.cuda.is_available() else '‚ùå'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º CPU
    cpu_time = benchmark_device('cpu')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º MPS –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if torch.backends.mps.is_available():
        mps_time = benchmark_device('mps')
        
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   CPU –≤—Ä–µ–º—è: {cpu_time:.3f} —Å–µ–∫")
        print(f"   MPS –≤—Ä–µ–º—è: {mps_time:.3f} —Å–µ–∫")
        print(f"   üöÄ MPS –±—ã—Å—Ç—Ä–µ–µ –≤ {cpu_time/mps_time:.1f}x —Ä–∞–∑!")
    else:
        print("\n‚ùå MPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ")

if __name__ == "__main__":
    main() 